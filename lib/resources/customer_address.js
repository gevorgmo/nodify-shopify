// Generated by CoffeeScript 1.10.0
(function() {
  var BaseChild, CustomerAddress, pluralize,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseChild = require('./base_child');

  pluralize = require('pluralize');

  CustomerAddress = (function(superClass) {
    extend(CustomerAddress, superClass);

    CustomerAddress.prototype.parent = '/customers';

    CustomerAddress.prototype.child = '/addresses';

    CustomerAddress.prototype.slug = {
      short: 'address',
      long: 'customer_address'
    };

    function CustomerAddress(site) {
      CustomerAddress.__super__.constructor.call(this, site);
    }

    CustomerAddress.prototype.all = function(parentId, params, callback) {
      var ref, url;
      if (typeof params === 'function') {
        ref = [callback, params], params = ref[0], callback = ref[1];
      }
      url = this.resource.queryString(this.prefix + "/" + parentId + this.child, params);
      return this.resource.get(url, pluralize(this.slug.short), callback);
    };

    CustomerAddress.prototype.set = function(parentId, params, callback) {
      var ref, url;
      if (typeof params === 'function') {
        ref = [callback, params], params = ref[0], callback = ref[1];
      }
      url = this.resource.queryString(this.prefix + "/" + parentId + this.child + "/set", params);
      return this.resource.put(url, void 0, {}, callback);
    };

    CustomerAddress.prototype["default"] = function(parentId, id, callback) {
      var url;
      url = this.resource.queryString(this.prefix + "/" + parentId + this.child + "/" + id + "/default");
      return this.resource.put(url, void 0, {}, (function(_this) {
        return function(err, body) {
          if (err) {
            return callback(err);
          }
          return callback(void 0, body[_this.slug.long]);
        };
      })(this));
    };

    return CustomerAddress;

  })(BaseChild);

  module.exports = CustomerAddress;

}).call(this);
