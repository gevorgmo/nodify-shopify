// Generated by CoffeeScript 1.10.0
(function() {
  var BaseDescendant, pluralize;

  pluralize = require('pluralize');

  BaseDescendant = (function() {
    BaseDescendant.prototype.resource = require('../resource');

    BaseDescendant.prototype.slug = 'base';

    function BaseDescendant(site) {
      this.prefix = "" + site;
    }

    BaseDescendant.prototype.all = function(owner, params, callback) {
      var slug, url;
      slug = pluralize(this.slug);
      url = this.prefix;
      if (typeof owner === 'function') {
        callback = owner;
        params = null;
      } else if (typeof params === 'function') {
        callback = params;
        params = owner;
        if (params.resource) {
          url = url + "/" + (pluralize(params.resource)) + "/" + params.id;
          params = null;
        }
      } else {
        url = url + "/" + (pluralize(owner.resource)) + "/" + owner.id;
      }
      url = this.resource.queryString(url + "/" + slug, params);
      return this.resource.get(url, slug, callback);
    };

    BaseDescendant.prototype.count = function(owner, params, callback) {
      var slug, url;
      slug = pluralize(this.slug);
      url = this.prefix;
      if (typeof owner === 'function') {
        callback = owner;
        params = null;
      } else if (typeof params === 'function') {
        callback = params;
        params = owner;
        if (params.resource) {
          url = url + "/" + (pluralize(params.resource)) + "/" + params.id;
          params = null;
        }
      } else {
        url = url + "/" + (pluralize(owner.resource)) + "/" + owner.id;
      }
      url = this.resource.queryString(url + "/" + slug + "/count", params);
      return this.resource.get(url, 'count', callback);
    };

    BaseDescendant.prototype.get = function(owner, id, params, callback) {
      var slug, url;
      slug = pluralize(this.slug);
      url = this.prefix;
      if (typeof owner === 'object') {
        url = url + "/" + (pluralize(owner.resource)) + "/" + owner.id;
      } else {
        callback = params;
        params = id;
        id = owner;
      }
      if (typeof params === 'function') {
        callback = params;
        params = null;
      }
      url = this.resource.queryString(url + "/" + slug + "/" + id, params);
      return this.resource.get(url, this.slug, callback);
    };

    BaseDescendant.prototype.create = function(owner, fields, callback) {
      var slug, url;
      slug = pluralize(this.slug);
      url = this.prefix;
      if (typeof fields === 'function') {
        callback = fields;
        fields = owner;
      } else {
        url = url + "/" + (pluralize(owner.resource)) + "/" + owner.id;
      }
      url = this.resource.queryString(url + "/" + slug);
      return this.resource.post(url, this.slug, fields, callback);
    };

    BaseDescendant.prototype.update = function(owner, id, fields, callback) {
      var slug, url;
      slug = pluralize(this.slug);
      url = this.prefix;
      if (typeof fields === 'function') {
        callback = fields;
        fields = id;
        id = owner;
      } else {
        url = url + "/" + (pluralize(owner.resource)) + "/" + owner.id;
      }
      url = this.resource.queryString(url + "/" + slug + "/" + id);
      return this.resource.put(url, this.slug, fields, callback);
    };

    BaseDescendant.prototype["delete"] = function(owner, id, callback) {
      var slug, url;
      slug = pluralize(this.slug);
      url = this.prefix;
      if (typeof id === 'function') {
        callback = id;
        id = owner;
      } else {
        url = url + "/" + (pluralize(owner.resource)) + "/" + owner.id;
      }
      url = this.resource.queryString(url + "/" + slug + "/" + id);
      return this.resource["delete"](url, id, callback);
    };

    return BaseDescendant;

  })();

  module.exports = BaseDescendant;

}).call(this);
